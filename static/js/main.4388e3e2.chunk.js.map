{"version":3,"sources":["components/Layout/Layout.js","redux/tasks/tasksActionsTypes.js","redux/tasks/tasksActions.js","components/Tasks/TaskEditor/TaskEditor.js","components/Tasks/TaskList/TaskListItem.js","components/Tasks/TaskList/TaskList.js","components/Tasks/Filter.js","components/Tasks/Tasks.js","components/App.js","redux/tasks/tasksReducer.js","redux/store.js","index.js"],"names":["Layout","children","className","addTask","text","type","actionType","payload","task","id","uuidv4","completed","removeTask","taskId","toggleCompleted","changeFilter","filter","TaskEditor","state","handleChange","event","setState","target","value","handleSubmit","preventDefault","props","onAddTask","this","onSubmit","onChange","Component","mapDispatchToProps","taskActions","connect","TaskListItem","comleted","onRemove","onUpdate","checked","onClick","onRemoveTask","tasksActions","onUpdateTask","tasks","items","includes","toLowerCase","map","onchangeFilter","evt","Tasks","App","combineReducers","actionsTypes","rootReducer","taskReducer","store","createStore","window","__REDUX_DEVTOOLS_EXTENSION__","ReactDom","render","document","querySelector"],"mappings":"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","file":"static/js/main.4388e3e2.chunk.js","sourcesContent":["import React from 'react'\nimport './Layout.css'\n\nconst Layout = ({ children }) => {\n  return <div className=\"Layout\">{children}</div>\n}\n\n\nexport default Layout;\n","const ADD = \"tasks/add\";\nconst REMOVE = \"tasks/remove\";\nconst TOGGLE_COMPLITED = \"toggleComplited\";\nconst CHANGE_FILTER = \"tasks/changeFilter\";\n\nexport default {\n  ADD,\n  REMOVE,\n  TOGGLE_COMPLITED,\n  CHANGE_FILTER,\n};\n","import { v4 as uuidv4 } from \"uuid\";\nimport actionType from \"./tasksActionsTypes\";\n\nlet addTask = (text) => ({\n  type: actionType.ADD,\n  payload: {\n    task: {\n      id: uuidv4(),\n      text,\n      completed: false,\n    },\n  },\n});\n\nlet removeTask = (taskId) => ({\n  type: actionType.REMOVE,\n  payload: {\n    taskId,\n  },\n});\n\nlet toggleCompleted = (taskId) => ({\n  type: actionType.TOGGLE_COMPLITED,\n  payload: {\n    taskId,\n  },\n});\n\nlet changeFilter = (filter) => ({\n  type: actionType.CHANGE_FILTER,\n  payload: {\n    filter,\n  },\n});\n\nexport default {\n  addTask,\n  removeTask,\n  toggleCompleted,\n  changeFilter,\n};\n","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport taskActions from \"../../../redux/tasks/tasksActions\";\n\nclass TaskEditor extends Component {\n  state = {\n    text: \"\",\n  };\n\n  handleChange = (event) => {\n    this.setState({\n      text: event.target.value,\n    });\n  };\n\n  handleSubmit = (event) => {\n    event.preventDefault();\n    this.props.onAddTask(this.state.text);\n\n    this.setState({\n      text: \"\",\n    });\n  };\n\n  render() {\n    let { text } = this.state;\n\n    return (\n      <>\n        <hr />\n        <form onSubmit={this.handleSubmit}>\n          <label>\n            <input type=\"text\" value={text} onChange={this.handleChange} />\n          </label>\n\n          <button type=\"submit\">Add task</button>\n        </form>\n      </>\n    );\n  }\n}\n\nlet mapDispatchToProps = {\n  onAddTask: taskActions.addTask,\n};\n\n// let mapDispatchToProps = (dispatch) => {\n//   return {\n//     onAddTask: (text) => dispatch(taskActions.addTask(text)),\n//   };\n// };\n\nexport default connect(null, mapDispatchToProps)(TaskEditor);\n","import React from 'react';\n\nexport default function TaskListItem({ text, comleted, onRemove, onUpdate }) {\n    return (\n        <li className=\"TaskList-item\">\n            <p className=\"TaskList-text\">{text}</p>\n            <section className=\"TaskList-actions\">\n                <label>\n                    <input\n                        type=\"checkbox\"\n                        checked={comleted}\n                        onChange={onUpdate}\n                    />\n                </label>\n\n                <button\n                    onClick={onRemove}\n                    type=\"button\"\n                    className=\"TaskList-button\"\n                >\n                    Delete\n                </button>\n            </section>\n        </li>\n    );\n}\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport tasksActions from \"../../../redux/tasks/tasksActions\";\nimport \"./TaskList.css\";\n\nimport TaskListItem from \"./TaskListItem\";\nfunction TaskList({ tasks, onRemoveTask, onUpdateTask }) {\n  return (\n    <div>\n      <ul className=\"TaskList\">\n        {tasks.map(({ id, text, completed }) => (\n          <TaskListItem\n            key={id}\n            text={text}\n            completed={completed}\n            onRemove={() => onRemoveTask(id)}\n            onUpdate={() => onUpdateTask(id)}\n          />\n        ))}\n      </ul>\n    </div>\n  );\n}\n\nlet mapStateToProps = (state) => {\n  let { items, filter } = state.tasks;\n\n  let visibleTasks = items.filter((task) =>\n    task.text.includes(filter.toLowerCase())\n  );\n  return {\n    tasks: visibleTasks,\n  };\n};\n\nlet mapDispatchToProps = {\n  onRemoveTask: tasksActions.removeTask,\n  onUpdateTask: tasksActions.toggleCompleted,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(TaskList);\n","import React from \"react\";\nimport { connect } from \"react-redux\";\n\nimport tasksActions from \"../../redux/tasks/tasksActions\";\n\nfunction Filter({ value, onchangeFilter }) {\n  return (\n    <>\n      <br />\n      <label>\n        Filter Tasks\n        <input\n          type=\"text\"\n          value={value}\n          onChange={(evt) => onchangeFilter(evt.target.value)}\n        />\n      </label>\n    </>\n  );\n}\nlet mapStateToProps = (state) => ({\n  value: state.tasks.filter,\n});\nlet mapDispatchToProps = {\n  onchangeFilter: tasksActions.changeFilter,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter);\n","import React, { Component } from \"react\";\nimport TaskEditor from \"./TaskEditor\";\nimport TaskList from \"./TaskList\";\nimport Filter from \"./Filter\";\n\nexport default class Tasks extends Component {\n  render() {\n    return (\n      <>\n        <TaskEditor />\n        <Filter />\n        <TaskList />\n      </>\n    );\n  }\n}\n","import React, { Component } from 'react';\nimport Layout from './Layout';\nimport Tasks from './Tasks';\n\nexport default class App extends Component {\n    render() {\n        return (\n            <Layout>\n                <Tasks />\n            </Layout>\n        );\n    }\n}\n","import actionsTypes from \"./tasksActionsTypes\";\nimport { combineReducers } from \"redux\";\n\nlet itemsReducer = (state = [], { type, payload }) => {\n  switch (type) {\n    case actionsTypes.ADD:\n      return [...state, payload.task];\n\n    case actionsTypes.REMOVE:\n      return state.filter((task) => task.id !== payload.taskId);\n\n    case actionsTypes.TOGGLE_COMPLITED:\n      return state.map((task) => {\n        return task.id === payload.taskId\n          ? { ...task, completed: !task.completed }\n          : task;\n      });\n\n    default:\n      return state;\n  }\n};\n\nlet filterReducer = (state = \"\", { type, payload }) => {\n  switch (type) {\n    case actionsTypes.CHANGE_FILTER:\n      return payload.filter;\n\n    default:\n      return state;\n  }\n};\n\nexport default combineReducers({\n  items: itemsReducer,\n  filter: filterReducer,\n});\n","import { createStore, combineReducers } from \"redux\";\nimport taskReducer from \"./tasks/tasksReducer\";\n\nlet rootReducer = combineReducers({\n  tasks: taskReducer,\n});\n\nlet store = createStore(\n  rootReducer,\n  window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n);\n\nexport default store;\n","import React from \"react\";\nimport ReactDom from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport App from \"./components/App\";\nimport \"./base.css\";\nimport store from \"./redux/store\";\n\nReactDom.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.querySelector(\"#root\")\n);\n"],"sourceRoot":""}